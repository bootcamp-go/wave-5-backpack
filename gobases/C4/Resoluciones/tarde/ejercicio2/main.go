package main

import (
	"fmt"
	"math/rand"
	"os"
)

/*Ejercicio 2 - Registrando clientes

El mismo estudio del ejercicio anterior, solicita una funcionalidad para poder registrar datos de nuevos clientes.
Los datos requeridos para registrar a un cliente son:

Legajo
Nombre y Apellido
DNI
N√∫mero de tel√©fono
Domicilio

Tarea 1: El n√∫mero de legajo debe ser asignado o generado por separado y en forma previa a la carga de los restantes
gastos. Desarrolla e implementa una funci√≥n para generar un ID que luego utilizar√°s para asignarlo como valor a ‚ÄúLegajo‚Äù.
Si por alg√∫n motivo esta funci√≥n retorna valor ‚Äúnil‚Äù, debe generar un panic que interrumpa la ejecuci√≥n y aborte.
Tarea 2: Antes de registrar a un cliente, debes verificar si el mismo ya existe. Para ello, necesitas leer los datos de
un archivo .txt. En alg√∫n lugar de tu c√≥digo, implementa la funci√≥n para leer un archivo llamado ‚Äúcustomers.txt‚Äù
(como en el ejercicio anterior, este archivo no existe, por lo que la funci√≥n que intente leerlo devolver√° un error).
Debes manipular adecuadamente ese error como hemos visto hasta aqu√≠. Ese error deber√°:

1.- generar un panic;
2.- lanzar por consola el mensaje: ‚Äúerror: el archivo indicado no fue encontrado o est√° da√±ado‚Äù, y continuar con la
ejecuci√≥n del programa normalmente.

Tarea 3: Luego de intentar verificar si el cliente a registrar ya existe, desarrolla una funci√≥n para validar que todos
los datos a registrar de un cliente contienen un valor distinto de cero. Esta funci√≥n debe retornar, al menos, dos valores.
Uno de los valores retornados deber√° ser de tipo error para el caso de que se ingrese por par√°metro alg√∫n valor cero
(recuerda los valores cero de cada tipo de dato, ej: 0, ‚Äú‚Äù, nil).
Tarea 4: Antes de finalizar la ejecuci√≥n, incluso si surgen panics, se deber√°n imprimir por consola los siguientes mensajes:
‚ÄúFin de la ejecuci√≥n‚Äù, ‚ÄúSe detectaron varios errores en tiempo de ejecuci√≥n‚Äù y ‚ÄúNo han quedado archivos abiertos‚Äù (en ese orden).
Utiliza defer para cumplir con este requerimiento.

Requerimientos generales:

Utiliza recover para recuperar el valor de los panics que puedan surgir (excepto en la tarea 1).
Record√° realizar las validaciones necesarias para cada retorno que pueda contener un valor error
(por ejemplo las que intenten leer archivos).
Genera alg√∫n error, personalizandolo a tu gusto, utilizando alguna de las funciones que GO provee para ello
(realiza tambi√©n la validaci√≥n pertinente para el caso de error retornado).
*/

type Cliente struct {
	Legajo         int64
	DNI            int64
	NombreApellido string
	Telefono       string
	Domcilio       string
}

func main() {
	var (
		dni            int64  = 0
		nombreapellido string = "Juan Martin"
		telefono       string = "+54327482399"
		domicilio      string = "Monroe 860"
	)

	legajoId, err := generarId()
	if err != nil {
		panic(err)
	}

	verificarCliente(legajoId)
	NewCliente(legajoId, dni, nombreapellido, telefono, domicilio)

	fmt.Println("Fin de la ejecuci√≥n")
}

func generarId() (int64, error) {
	var id int = rand.Int()
	return int64(id), nil
}

func verificarCliente(id int64) {
	defer func() {
		err := recover() // Recupera el panic - para evitar una ejecuci√≥n no deseada

		if err != nil {
			fmt.Println(err)
		}

		fmt.Println("No han quedado archivos abiertos")
	}()

	read, err := os.Open("./customer.txt")
	if err != nil {
		fmt.Println("Llegando al panic . . . üëÄ")
		panic("el archivo indicado no fue encontrado o est√° da√±ado")
	}
	defer read.Close()
	// Si existe el archivo validamos - leyendo el archivo - (Opcional)
}

func NewCliente(legajo, dni int64, nombreapellido, telefono, domcilioo string) (*Cliente, error) {
	defer func() {
		err := recover()

		if err != nil {
			fmt.Println("Se detectaron varios errores en tiempo de ejecuci√≥n")
		}
	}()

	if legajo != 0 {
		panic("Legajo no puede ser 0")
	}

	if dni != 0 {
		panic("DNI no puede ser 0")
	}

	if nombreapellido != "" {
		panic("Nombre y apellido son requeridos")
	}

	if telefono != "" {
		panic("Telefono son requeridos")
	}

	if domcilioo != "" {
		panic("Domicilio son requeridos")
	}

	return &Cliente{Legajo: legajo, DNI: dni, NombreApellido: nombreapellido, Telefono: telefono, Domcilio: domcilioo}, nil
}
