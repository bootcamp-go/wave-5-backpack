SQL 3 - MOVIES DB

1) Explicar el concepto de normalización y para que se utiliza.
    Se busca aplicar un conjunto de reglas que permitan minimizar la redundancia de datos
2) Agregar una película a la tabla movies.

INSERT INTO
    movies (
        created_at,
        updated_at,
        title,
        rating,
        awards,
        release_date,
        length
    )
VALUES (
        NOW(),
        NOW(),
        'Avatar',
        9.8,
        11,
        '2009-12-08',
        180
    );

3) Agregar un género a la tabla genres.

INSERT INTO
    genres (
        created_at,
        updated_at,
        name,
        ranking,
        active
    )
VALUES (NOW(), NOW(), 'Fantasia', 10, 1);

4) Asociar a la película del Ej 2. con el género creado en el Ej. 3.

UPDATE movies
SET genre_id = (
        SELECT id
        FROM genres
        WHERE name = 'Fantasia'
    )
WHERE
    title = 'Avatar';

5) Modificar la tabla actors para que al menos un actor tenga como favorita la película agregada en el Ej.2.

UPDATE actors
SET favorite_movie_id = (
        SELECT id
        FROM movies
        WHERE
            title = 'Avatar'
    )
LIMIT 1;

6) Crear una tabla temporal copia de la tabla movies.

CREATE TEMPORARY TABLE movies_copy ( SELECT * FROM movies );

7) Eliminar de esa tabla temporal todas las películas que hayan ganado menos de 5 awards.

DELETE FROM movies_copy WHERE awards < 5;

8) Obtener la lista de todos los géneros que tengan al menos una película.

SELECT
    genres.name,
    #COUNT(movies.id) as movies_count
FROM genres
    JOIN movies ON genres.id = movies.genre_id
GROUP BY genres.name
HAVING COUNT(movies.id) > 0;

9) Obtener la lista de actores cuya película favorita haya ganado más de 3 awards. 

SELECT
    concat_ws(
        ' ',
        actors.first_name,
        actors.last_name
    ) as actor_name,
    #movies.title,
    #movies.awards
FROM actors
    JOIN movies ON actors.favorite_movie_id = movies.id
WHERE movies.awards > 3;

10) Utilizar el explain plan para analizar las consultas del Ej.6 y 7.

EXPLAIN CREATE TEMPORARY TABLE movies_copy ( SELECT * FROM movies );

11) ¿Qué son los índices? ¿Para qué sirven?

Es una estructura de datos que mejora la velocidad de las operaciones, permitiendo un rápido acceso a los registros de una tabla en una base de datos

12) Crear un índice sobre el nombre en la tabla movies.

CREATE INDEX movies_name_idx ON movies (title);

13) Chequee que el índice fue creado correctamente.

SHOW INDEX FROM movies;